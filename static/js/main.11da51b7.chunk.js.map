{"version":3,"sources":["logo.svg","service/movie.service.js","components/Pagination.js","components/searchBar.js","components/movieList.js","App.js","reportWebVitals.js","index.js"],"names":["apiKey","MovieService","title","page","axios","get","then","response","data","catch","error","console","ID","Pagination","condition","pageCount","getMoviesByPage","currentPage","restrictedValues","PaginationButton","disabled","onClick","includes","SearchBar","onSearch","useState","setTitle","onSubmit","event","preventDefault","onFormSubmit","className","htmlFor","type","name","onChange","target","value","onInputChange","MovieList","setPageCount","setCurrentPage","movieTitle","setMovieTitle","movies","setMovies","movieService","getMoviesByTitle","a","log","getMovieByTitle","movieList","Math","ceil","totalResults","Search","moviesResponse","useEffect","map","movie","index","src","Poster","alt","Title","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11da51b7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from 'axios';\nconst apiKey = '7ea59a4d';\nexport default class MovieService\n{\n\tgetMovieByTitle(title,page=1)\n\t{\n\t\treturn axios.get(`https://www.omdbapi.com/?s=${title}&page=${page}&apikey=${apiKey}`)\n\t\t.then((response) => response.data)\n\t\t.catch((error) => console.error(error));\n\t}\n\n\tgetMovieByID(ID)\n\t{\n\t\treturn axios.get(`https://www.omdbapi.com/?i=${ID}&apikey=${apiKey}`)\n\t\t.then((response) => response.data)\n\t\t.catch((error) => console.error(error));\n\t}\n}","import {useState} from \"react\";\n\nexport const Pagination = ({pageCount,getMoviesByPage,currentPage}) =>\n{\n\tconst restrictedValues = [1,2,pageCount-2,pageCount-1,pageCount];\n\n\tconst PaginationButton = ({page}) =>\n\t(\n\t\t<button\n\t\t\tdisabled={page === currentPage}\n\t\t\tonClick={() => getMoviesByPage(page)}\n\t\t\t>\n\t\t\t{page}\n\t\t</button>\n\t)\n\nconst renderButtonsConditionally = (condition) =>\n(\n\tcondition\n\t? (\n\t\t<>\n\t\t\t<PaginationButton page={currentPage + 1} />\n\t\t\t<PaginationButton page={currentPage + 2} />\n\t\t\t<PaginationButton page={currentPage + 3} />\n\t\t</>\n\t\t)\n\t\t: null\n)\n\treturn(\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => getMoviesByPage(currentPage - 1)}\n\t\t\t\t\tdisabled={currentPage === 1}>\n\t\t\t\t\tback\n\t\t\t\t</button>\n\t\t\t\t<span>page {currentPage}</span>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => getMoviesByPage(currentPage +1)}\n\t\t\t\t\tdisabled={currentPage === pageCount}>\n\t\t\t\t\tforward\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<PaginationButton page={1}/>\n\t\t\t\t<PaginationButton page={2}/>\n\t\t\t\t<paginationButton page={3}/>\n\t\t\t\t{currentPage > 4 && <span>...</span>}\n\t\t\t\t{\n\t\t\t\t\trenderButtonsConditionally(!restrictedValues.includes(currentPage))\n\t\t\t\t}\n\t\t\t\t{currentPage !== 47 && <span>...</span>}\n\t\t\t\t<PaginationButton page={pageCount - 2}/>\n\t\t\t\t<PaginationButton page={pageCount - 1}/>\n\t\t\t\t<PaginationButton page={pageCount}/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\nexport default Pagination;","import { useState } from \"react\";\n\nconst SearchBar = ({onSearch}) =>\n{\n\tconst [title, setTitle] = useState();\n\t\n\tconst onFormSubmit = (event) =>\n\t{\n\t\tevent.preventDefault();\n\t\tonSearch(title);\n\t}\n\t\n\tconst onInputChange = (event) =>\n\t{\n\t\tsetTitle(event.target.value);\n\t}\n\t\n\treturn(\n\t\t<div>\n\t\t\t<form onSubmit={(event) => onFormSubmit(event)}>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"title\">Title</label>\n\t\t\t\t\t<input type=\"text\" name=\"title\" onChange={(event) => onInputChange(event)} />\n\t\t\t\t</div>\n\t\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\nexport default SearchBar;","import React, {useState, useEffect} from \"react\";\nimport MovieService from \"../service/movie.service\";\nimport Pagination from \"./Pagination\";\nimport SearchBar from \"./searchBar\";\n// import movieService from \"../service/movie.service\";\n\n\n// Functional Component MovieList\nexport const MovieList = () =>\n{\n\t// Assigning new state variables:\n\n\t// Here we are setting the number of pages on the fly, using state\n\tconst [pageCount, setPageCount] = useState(44);\n\n\t// Here we are setting the current page on the fly, using state. When the forward button is clicked, state is checked for an impending change\n\tconst [currentPage, setCurrentPage] = useState(1);\n\n\t// Here we are setting the movieTitle State. This is as opposed to the title variable, which gets passed around but isn't able to change state.\n\tconst [movieTitle, setMovieTitle] = useState();\n\n\tconst [movies, setMovies] = useState([]);\n\t\n\tconst movieService = new MovieService();\n\n\tconst onSearch = (title) =>\n\t{\n\t\tgetMoviesByTitle(title);\n\t}\n\n\tconst getMoviesByTitle = async (title) =>\n\t{\n\t\tconsole.log(title);\n\t\tsetMovieTitle(title);\n\t\tconst movieList = await movieService.getMovieByTitle(title);\n\t\tconsole.log(movieList);\n\t\tsetPageCount(Math.ceil(movieList.totalResults / 10));\n\t\tsetMovies(movieList.Search);\n\t}\n\n\tconst getMoviesByPage = async (page) =>\n\t{\n\t\tsetCurrentPage(page);\n\t\tconst movieList = await movieService.getMovieByTitle(movieTitle, page);\n\t\tsetMovies(movieList.Search);\n\t}\n\n\tasync function getMovieByTitle()\n\t{\n\t\t// set movies to whatever comes out of the method getMovieByTitle\n\t\tconst moviesResponse = await movieService.getMovieByTitle(movieTitle);\n\t\t// set whatever is in movies.Search into the state\n\t\tsetMovies(moviesResponse.Search); // takes whatever is in moviesResponse.Search and stuffs it into movies state variable\n\t\t// Why is state special?\n\t\t// State variables are \"watched\" for changes, if one changes, the DOM auto updates\n\t}\n\n\t// This runs by default when the page loads (this is the first initial run of getMovieByTitle())\n\tuseEffect(() => {getMovieByTitle();}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<SearchBar onSearch={onSearch} />\n\t\t\t{\n\t\t\t\tmovies.map((movie, index) => (\n\t\t\t\t\t<div className=\"movie-card\" key={index}>\n\t\t\t\t\t\t<img src={movie.Poster} alt={`${movie.Title}`}/>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h5>{movie.title}</h5>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={() => {console.log(movie)}}\n\t\t\t\t\t\t\t>Log Movie</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t))\n\t\t\t}\n\t\t\t{pageCount &&\n\t\t\t\t<Pagination\n\t\t\t\t\tpageCount={pageCount}\n\t\t\t\t\tcurrentPage={currentPage}\n\t\t\t\t\tgetMoviesByPage={getMoviesByPage}\n\t\t\t\t/>\n\t\t\t}\n\t\t</div>\n\t)\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport MovieService from './service/movie.service';\nimport { useEffect } from 'react';\nimport { MovieList } from './components/movieList';\n\nconst App = () => {\n\n  return(\n    <div>\n      <MovieList/>\n    </div>\n  )\n\n  // const {getMovies} = new MovieService();\n\n  // const [movieList, setMovieList] = useState();\n\n  // const getMovieList = async (title => {\n  //   const movies = await getMovies(title);\n  //   setMovieList(movies.Search)\n  // };\n\n  // useEffect(()) => {\n  //   getMovieList('star wars');\n  // }, (1);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Blarg from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reactDom from 'react-dom';\nimport {useState} from 'react';\n// import {ErrorComponent} from './components/StateExample';\nimport {MovieCard} from './components/movieCard';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n// *********************************************************\n// Writing to the dom with somewhat normal JS\n// const rootDiv = document.getElementById('root');\n// const greeting = document.createElement('p');\n// greeting.innerHTML = \"Hello from React App\";\n\n// const time = document.createElement('p');\n// time.innerHTML = `It is ${(new Date()).toLocaleTimeString()}`;\n\n// console.log(greeting);\n// rootDiv.appendChild(greeting);\n// rootDiv.appendChild(time);\n// *********************************************************\n\n\nReactDOM.render\n(\n  // <div>\n  //   <ErrorComponent/>\n  // </div>,\n\n  // <div>\n  //   <MovieCard \n  //   title=\"Batman v Superman: Dawn of Justice\" \n  //   type=\"Movie!\" \n  //   rated=\"pg-13\" \n  //   runtime=\"138 minutes\" \n  //   genre=\"Action, Adventure, Sci-Fi\" \n  //   plot=\"Fearing that the actions of Superman are left unchecked, Batman takes on the Man of Steel, while the world wrestles with what kind of a hero it really needs.\" \n  //   actors=\"Ben Affleck, Henry Cavill, Amy Adams, Jesse Eisenberg\" \n  //   posterUrl=\"https://upload.wikimedia.org/wikipedia/en/3/35/Supermanflying.png\"/>\n  // </div>,\n\n  <div>\n    <Blarg/>\n  </div>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}